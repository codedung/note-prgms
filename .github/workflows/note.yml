name: note-CI
on:
  push:
    branches: ["main"]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: note-prgms
  CONTAINER_NAME: note-prgms

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate env
        run: echo "DB_USER=$DB_USER" >> ./server/.env.production
          echo "DB_PASSWORD=$DB_PASSWORD" >> ./server/.env.production
          echo "DB_ROOT_PASSWORD=$DB_ROOT_PASSWORD" >> ./server/.env.production
          echo "DB_DATABASE=$DB_DATABASE" >> ./server/.env.production
          echo "DB_HOST=$DB_HOST" >> ./server/.env.production
          echo "DB_PORT=$DB_PORT" >> ./server/.env.production
          echo "DB_LIMIT=$DB_LIMIT" >> ./server/.env.production
          echo "CORS_ORIGIN=$CORS_ORIGIN" >> ./server/.env.production
          echo "JWT_ACCESS_SECRET=$JWT_ACCESS_SECRET" >> ./server/.env.production
          echo "JWT_ACCESS_EXPIRED_IN=$JWT_ACCESS_EXPIRED_IN" >> ./server/.env.production
          echo "JWT_REFRESH_SECRET=$JWT_REFRESH_SECRET" >> ./server/.env.production
          echo "JWT_REFRESH_EXPIRED_IN=$JWT_REFRESH_EXPIRED_IN" >> ./server/.env.production
          echo "SALT_ROUND=$SALT_ROUND" >> ./server/.env.production
          echo "ACCESS_KEY=$ACCESS_KEY" >> ./server/.env.production
          echo "SECRET_ACCESS_KEY=$SECRET_ACCESS_KEY" >> ./server/.env.production
          echo "AWS_REGION=$AWS_REGION" >> ./server/.env.production
          echo "S3_BUCKET_NAME=$S3_BUCKET_NAME" >> ./server/.env.production
          echo "SERVER_PORT=$SERVER_PORT" >> ./server/.env.production
        env:
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_LIMIT: ${{ secrets.DB_LIMIT }}
          CORS_ORIGIN: ${{ secrets.CORS_ORIGIN }}
          JWT_ACCESS_SECRET: ${{ secrets.JWT_ACCESS_SECRET }}
          JWT_ACCESS_EXPIRED_IN: ${{ secrets.JWT_ACCESS_EXPIRED_IN }}
          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
          JWT_REFRESH_EXPIRED_IN: ${{ secrets.JWT_REFRESH_EXPIRED_IN }}
          SALT_ROUND: ${{ secrets.SALT_ROUND }}
          ACCESS_KEY: ${{ secrets.ACCESS_KEY }}
          SECRET_ACCESS_KEY: ${{ secrets.SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          SERVER_PORT: ${{ secrets.SERVER_PORT }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          host: ${{ secrets.EC2_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker login -u AWS -p $(aws ecr get-login-password --region $AWS_REGION) $ECR_REGISTRY

      - name: ECR image Client Check
        id: client-check
        uses: appleboy/ssh-action@master
        env:
          CLIENT_IMAGE_NAME: note-client
        with:
          host: ${{ secrets.EC2_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo "::set-output name=image::aws ecr batch-get-image --repository-name $ECR_REPOSITORY --image-ids imageTag=$CLIENT_IMAGE_NAME" >> $CLIENT_CHECK

      - name: ECR image Server Check
        id: server-check
        uses: appleboy/ssh-action@master
        env:
          SERVER_IMAGE_NAME: note-server
        with:
          host: ${{ secrets.EC2_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo "::set-output name=image::aws ecr batch-get-image --repository-name $ECR_REPOSITORY --image-ids imageTag=$SERVER_IMAGE_NAME" >> $SERVER_CHECK

      - name: ECR image Delete
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo ${{ steps.client-check.outputs }}
            echo $CLIENT_CHECK
            echo ${{ steps.server-check.outputs }}
            if [[ ${{ steps.client-check.outputs }} -eq true ]]; then
              aws ecr batch-delete-image --repository-name note-prgms --image-ids imageTag=$CLIENT_IMAGE_NAME
            fi
            if [[ steps.server-check.outputs.image ]]; then
              aws ecr batch-delete-image --repository-name note-prgms --image-ids imageTag=$SERVER_IMAGE_NAME
            fi

      - name: cilent image build and push
        working-directory: ./client
        id: client-build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          IMAGE_NAME: note-client
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_NAME .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_NAME

      - name: server image build and push
        working-directory: ./server
        id: server-build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          IMAGE_NAME: note-server
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_NAME .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_NAME

      - name: EC2 Docker run
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.EC2_IP}}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            docker-compose -f ./docker-compose.yml build
            docker-compose up -d
